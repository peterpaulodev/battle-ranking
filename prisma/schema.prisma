generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  password      String?
  name          String?

  organizacao Organizacao?
  accounts    Account[]
  sessions    Session[]
}

model Organizacao {
  id       String   @id @default(cuid())
  nome     String
  slug     String   @unique
  criadoEm DateTime @default(now())
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  edicoes Edicao[]
}

model Edicao {
  id   String   @id @default(cuid())
  data DateTime @default(now())
  nome String

  organizacao   Organizacao @relation(fields: [organizacaoId], references: [id])
  organizacaoId String

  batalhas Batalha[]
}

model MC {
  id           String   @id @default(cuid())
  nome         String?
  apelido      String   @unique
  cidade       String?
  estado       String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @default(now()) @updatedAt
  ativo        Boolean  @default(true)

  pontuacoes    Pontuacao[]
  participacoes Participacao[]
  campeaoEm     Batalha[]      @relation("Campeao")
  viceEm        Batalha[]      @relation("Vice")
}

model Batalha {
  id       String @id @default(cuid())
  edicao   Edicao @relation(fields: [edicaoId], references: [id])
  edicaoId String

  campeao   MC      @relation("Campeao", fields: [campeaoId], references: [id])
  campeaoId String
  vice      MC?     @relation("Vice", fields: [viceId], references: [id])
  viceId    String?

  pontuacoes    Pontuacao[]
  participacoes Participacao[]
}

model Pontuacao {
  id     String        @id @default(cuid())
  tipo   TipoPontuacao
  pontos Int

  mc   MC     @relation(fields: [mcId], references: [id])
  mcId String

  batalha   Batalha @relation(fields: [batalhaId], references: [id])
  batalhaId String
}

model Participacao {
  id String @id @default(cuid())

  mc   MC     @relation(fields: [mcId], references: [id])
  mcId String

  batalha   Batalha @relation(fields: [batalhaId], references: [id])
  batalhaId String

  ordem Int?
}

enum TipoPontuacao {
  CAMPEAO
  VICE
  SEMI
  SEGUNDA
  ED
  DOIS_A_ZERO
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
